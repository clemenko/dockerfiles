jenkins:
  systemMessage: "Jenkins demo environment\n\n"
  numExecutors: 3
  scmCheckoutRetryCount: 2
  mode: NORMAL
  globalNodeProperties:
    - envVars:
        env:
          - key: ROX_API_TOKEN
            value: REPLACEME
          - key: HUB_PASSWORD
            value: REPLACEME
          - key: ROX_URL
            value: https://central.stackrox:443
  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false
  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: true
  clouds:
    - docker:
        name: "docker"
        dockerApi:
          dockerHost:
            uri: "unix:///var/run/docker.sock"
        templates:
          - labelString: "docker-agent"
            dockerTemplateBase:
              image: "jenkins/agent"
              environmentsString: |
                hello=world
                foo=bar
            remoteFs: "/home/jenkins/agent"
            connector:
              attach:
                user: "jenkins"
            instanceCapStr: "3"
tool:
  git:
    installations:
      - name: git
        home: /usr/bin/git
groovy:
  - script: >
      import jenkins.model.*;
      import hudson.security.*;
      import jenkins.security.s2m.AdminWhitelistRule;
      def instance = Jenkins.getInstance();
      def hudsonRealm = new HudsonPrivateSecurityRealm(false);
      hudsonRealm.createAccount("admin", "Pa22word");
      instance.setSecurityRealm(hudsonRealm);
      Jenkins.instance.getInjector().getInstance(AdminWhitelistRule.class).setMasterKillSwitch(false);
jobs:
  - script: >
      pipelineJob('StackRox_Sample') {
        definition {
          cps {
            script("""\
              pipeline {
                agent any
                stages {
                  stage('Build') {
                    steps {
                      sh "mkdir \$BUILD_TAG"
                      sh "echo 'library/alpine' >> \$BUILD_TAG/rox_images_to_scan"
                      sh "echo 'clemenko/jenkins' >> \$BUILD_TAG/rox_images_to_scan"
                    }
                  }
                  stage('Push to Dev') {
                    steps {
                      sh "echo 'docker push library/alpine' "
                      sh "echo 'docker push clemenko/jenkins' "
                    }
                  }
                  stage('Roxctl Image Scan') {
                    steps {
                      sh 'curl -k -L -H "Authorization: Bearer \$ROX_API_TOKEN" \$ROX_URL/api/cli/download/roxctl-linux --output ./roxctl && chmod +x ./roxctl'
                      sh "./roxctl --insecure-skip-tls-verify image scan -e \$ROX_URL --image clemenko/jenkins > jenkins.scan.json"
                      sh "./roxctl --insecure-skip-tls-verify image check -e \$ROX_URL --image clemenko/jenkins > jenkins.check.txt"
                    }
                  }
                  stage('Push to Prod') {
                    steps {
                      sh "echo 'docker push library/alpine' "
                      sh "echo 'docker push clemenko/jenkins' "
                    }
                  }
                }
                post {
                  always {
                    archiveArtifacts artifacts: '*.json', fingerprint: true
                    archiveArtifacts artifacts: '*.txt', fingerprint: true
                    archiveArtifacts artifacts: '*.csv', fingerprint: true
                  }
                }
              }""".stripIndent())
              sandbox()
          }
        }
      }